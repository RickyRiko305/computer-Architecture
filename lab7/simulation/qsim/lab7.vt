// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/15/2019 18:06:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_sample_tst(
	clk,
	clr,
	d,
	Read_sel_1_,
	Read_sel_2_,
	val,
	write_enable,
	sampler_tx
);
input  clk;
input  clr;
input [31:0] d;
input [2:0] Read_sel_1_;
input [2:0] Read_sel_2_;
input [2:0] val;
input  write_enable;
output sampler_tx;

reg sample;
time current_time;
always @(clk or clr or d or Read_sel_1_ or Read_sel_2_ or val or write_enable)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_vlg_check_tst (
	G_out1,
	G_out2,
	sampler_rx
);
input [31:0] G_out1;
input [31:0] G_out2;
input sampler_rx;

reg [31:0] G_out1_expected;
reg [31:0] G_out2_expected;

reg [31:0] G_out1_prev;
reg [31:0] G_out2_prev;

reg [31:0] G_out1_expected_prev;
reg [31:0] G_out2_expected_prev;

reg [31:0] last_G_out1_exp;
reg [31:0] last_G_out2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	G_out1_prev = G_out1;
	G_out2_prev = G_out2;
end

// update expected /o prevs

always @(trigger)
begin
	G_out1_expected_prev = G_out1_expected;
	G_out2_expected_prev = G_out2_expected;
end


// expected G_out1[ 31 ]
initial
begin
	G_out1_expected[31] = 1'bX;
end 
// expected G_out1[ 30 ]
initial
begin
	G_out1_expected[30] = 1'bX;
end 
// expected G_out1[ 29 ]
initial
begin
	G_out1_expected[29] = 1'bX;
end 
// expected G_out1[ 28 ]
initial
begin
	G_out1_expected[28] = 1'bX;
end 
// expected G_out1[ 27 ]
initial
begin
	G_out1_expected[27] = 1'bX;
end 
// expected G_out1[ 26 ]
initial
begin
	G_out1_expected[26] = 1'bX;
end 
// expected G_out1[ 25 ]
initial
begin
	G_out1_expected[25] = 1'bX;
end 
// expected G_out1[ 24 ]
initial
begin
	G_out1_expected[24] = 1'bX;
end 
// expected G_out1[ 23 ]
initial
begin
	G_out1_expected[23] = 1'bX;
end 
// expected G_out1[ 22 ]
initial
begin
	G_out1_expected[22] = 1'bX;
end 
// expected G_out1[ 21 ]
initial
begin
	G_out1_expected[21] = 1'bX;
end 
// expected G_out1[ 20 ]
initial
begin
	G_out1_expected[20] = 1'bX;
end 
// expected G_out1[ 19 ]
initial
begin
	G_out1_expected[19] = 1'bX;
end 
// expected G_out1[ 18 ]
initial
begin
	G_out1_expected[18] = 1'bX;
end 
// expected G_out1[ 17 ]
initial
begin
	G_out1_expected[17] = 1'bX;
end 
// expected G_out1[ 16 ]
initial
begin
	G_out1_expected[16] = 1'bX;
end 
// expected G_out1[ 15 ]
initial
begin
	G_out1_expected[15] = 1'bX;
end 
// expected G_out1[ 14 ]
initial
begin
	G_out1_expected[14] = 1'bX;
end 
// expected G_out1[ 13 ]
initial
begin
	G_out1_expected[13] = 1'bX;
end 
// expected G_out1[ 12 ]
initial
begin
	G_out1_expected[12] = 1'bX;
end 
// expected G_out1[ 11 ]
initial
begin
	G_out1_expected[11] = 1'bX;
end 
// expected G_out1[ 10 ]
initial
begin
	G_out1_expected[10] = 1'bX;
end 
// expected G_out1[ 9 ]
initial
begin
	G_out1_expected[9] = 1'bX;
end 
// expected G_out1[ 8 ]
initial
begin
	G_out1_expected[8] = 1'bX;
end 
// expected G_out1[ 7 ]
initial
begin
	G_out1_expected[7] = 1'bX;
end 
// expected G_out1[ 6 ]
initial
begin
	G_out1_expected[6] = 1'bX;
end 
// expected G_out1[ 5 ]
initial
begin
	G_out1_expected[5] = 1'bX;
end 
// expected G_out1[ 4 ]
initial
begin
	G_out1_expected[4] = 1'bX;
end 
// expected G_out1[ 3 ]
initial
begin
	G_out1_expected[3] = 1'bX;
end 
// expected G_out1[ 2 ]
initial
begin
	G_out1_expected[2] = 1'bX;
end 
// expected G_out1[ 1 ]
initial
begin
	G_out1_expected[1] = 1'bX;
end 
// expected G_out1[ 0 ]
initial
begin
	G_out1_expected[0] = 1'bX;
end 
// expected G_out2[ 31 ]
initial
begin
	G_out2_expected[31] = 1'bX;
end 
// expected G_out2[ 30 ]
initial
begin
	G_out2_expected[30] = 1'bX;
end 
// expected G_out2[ 29 ]
initial
begin
	G_out2_expected[29] = 1'bX;
end 
// expected G_out2[ 28 ]
initial
begin
	G_out2_expected[28] = 1'bX;
end 
// expected G_out2[ 27 ]
initial
begin
	G_out2_expected[27] = 1'bX;
end 
// expected G_out2[ 26 ]
initial
begin
	G_out2_expected[26] = 1'bX;
end 
// expected G_out2[ 25 ]
initial
begin
	G_out2_expected[25] = 1'bX;
end 
// expected G_out2[ 24 ]
initial
begin
	G_out2_expected[24] = 1'bX;
end 
// expected G_out2[ 23 ]
initial
begin
	G_out2_expected[23] = 1'bX;
end 
// expected G_out2[ 22 ]
initial
begin
	G_out2_expected[22] = 1'bX;
end 
// expected G_out2[ 21 ]
initial
begin
	G_out2_expected[21] = 1'bX;
end 
// expected G_out2[ 20 ]
initial
begin
	G_out2_expected[20] = 1'bX;
end 
// expected G_out2[ 19 ]
initial
begin
	G_out2_expected[19] = 1'bX;
end 
// expected G_out2[ 18 ]
initial
begin
	G_out2_expected[18] = 1'bX;
end 
// expected G_out2[ 17 ]
initial
begin
	G_out2_expected[17] = 1'bX;
end 
// expected G_out2[ 16 ]
initial
begin
	G_out2_expected[16] = 1'bX;
end 
// expected G_out2[ 15 ]
initial
begin
	G_out2_expected[15] = 1'bX;
end 
// expected G_out2[ 14 ]
initial
begin
	G_out2_expected[14] = 1'bX;
end 
// expected G_out2[ 13 ]
initial
begin
	G_out2_expected[13] = 1'bX;
end 
// expected G_out2[ 12 ]
initial
begin
	G_out2_expected[12] = 1'bX;
end 
// expected G_out2[ 11 ]
initial
begin
	G_out2_expected[11] = 1'bX;
end 
// expected G_out2[ 10 ]
initial
begin
	G_out2_expected[10] = 1'bX;
end 
// expected G_out2[ 9 ]
initial
begin
	G_out2_expected[9] = 1'bX;
end 
// expected G_out2[ 8 ]
initial
begin
	G_out2_expected[8] = 1'bX;
end 
// expected G_out2[ 7 ]
initial
begin
	G_out2_expected[7] = 1'bX;
end 
// expected G_out2[ 6 ]
initial
begin
	G_out2_expected[6] = 1'bX;
end 
// expected G_out2[ 5 ]
initial
begin
	G_out2_expected[5] = 1'bX;
end 
// expected G_out2[ 4 ]
initial
begin
	G_out2_expected[4] = 1'bX;
end 
// expected G_out2[ 3 ]
initial
begin
	G_out2_expected[3] = 1'bX;
end 
// expected G_out2[ 2 ]
initial
begin
	G_out2_expected[2] = 1'bX;
end 
// expected G_out2[ 1 ]
initial
begin
	G_out2_expected[1] = 1'bX;
end 
// expected G_out2[ 0 ]
initial
begin
	G_out2_expected[0] = 1'bX;
end 
// generate trigger
always @(G_out1_expected or G_out1 or G_out2_expected or G_out2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected G_out1 = %b | expected G_out2 = %b | ",G_out1_expected_prev,G_out2_expected_prev);
	$display("| real G_out1 = %b | real G_out2 = %b | ",G_out1_prev,G_out2_prev);
`endif
	if (
		( G_out1_expected_prev[0] !== 1'bx ) && ( G_out1_prev[0] !== G_out1_expected_prev[0] )
		&& ((G_out1_expected_prev[0] !== last_G_out1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[0] = G_out1_expected_prev[0];
	end
	if (
		( G_out1_expected_prev[1] !== 1'bx ) && ( G_out1_prev[1] !== G_out1_expected_prev[1] )
		&& ((G_out1_expected_prev[1] !== last_G_out1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[1] = G_out1_expected_prev[1];
	end
	if (
		( G_out1_expected_prev[2] !== 1'bx ) && ( G_out1_prev[2] !== G_out1_expected_prev[2] )
		&& ((G_out1_expected_prev[2] !== last_G_out1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[2] = G_out1_expected_prev[2];
	end
	if (
		( G_out1_expected_prev[3] !== 1'bx ) && ( G_out1_prev[3] !== G_out1_expected_prev[3] )
		&& ((G_out1_expected_prev[3] !== last_G_out1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[3] = G_out1_expected_prev[3];
	end
	if (
		( G_out1_expected_prev[4] !== 1'bx ) && ( G_out1_prev[4] !== G_out1_expected_prev[4] )
		&& ((G_out1_expected_prev[4] !== last_G_out1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[4] = G_out1_expected_prev[4];
	end
	if (
		( G_out1_expected_prev[5] !== 1'bx ) && ( G_out1_prev[5] !== G_out1_expected_prev[5] )
		&& ((G_out1_expected_prev[5] !== last_G_out1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[5] = G_out1_expected_prev[5];
	end
	if (
		( G_out1_expected_prev[6] !== 1'bx ) && ( G_out1_prev[6] !== G_out1_expected_prev[6] )
		&& ((G_out1_expected_prev[6] !== last_G_out1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[6] = G_out1_expected_prev[6];
	end
	if (
		( G_out1_expected_prev[7] !== 1'bx ) && ( G_out1_prev[7] !== G_out1_expected_prev[7] )
		&& ((G_out1_expected_prev[7] !== last_G_out1_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[7] = G_out1_expected_prev[7];
	end
	if (
		( G_out1_expected_prev[8] !== 1'bx ) && ( G_out1_prev[8] !== G_out1_expected_prev[8] )
		&& ((G_out1_expected_prev[8] !== last_G_out1_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[8] = G_out1_expected_prev[8];
	end
	if (
		( G_out1_expected_prev[9] !== 1'bx ) && ( G_out1_prev[9] !== G_out1_expected_prev[9] )
		&& ((G_out1_expected_prev[9] !== last_G_out1_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[9] = G_out1_expected_prev[9];
	end
	if (
		( G_out1_expected_prev[10] !== 1'bx ) && ( G_out1_prev[10] !== G_out1_expected_prev[10] )
		&& ((G_out1_expected_prev[10] !== last_G_out1_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[10] = G_out1_expected_prev[10];
	end
	if (
		( G_out1_expected_prev[11] !== 1'bx ) && ( G_out1_prev[11] !== G_out1_expected_prev[11] )
		&& ((G_out1_expected_prev[11] !== last_G_out1_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[11] = G_out1_expected_prev[11];
	end
	if (
		( G_out1_expected_prev[12] !== 1'bx ) && ( G_out1_prev[12] !== G_out1_expected_prev[12] )
		&& ((G_out1_expected_prev[12] !== last_G_out1_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[12] = G_out1_expected_prev[12];
	end
	if (
		( G_out1_expected_prev[13] !== 1'bx ) && ( G_out1_prev[13] !== G_out1_expected_prev[13] )
		&& ((G_out1_expected_prev[13] !== last_G_out1_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[13] = G_out1_expected_prev[13];
	end
	if (
		( G_out1_expected_prev[14] !== 1'bx ) && ( G_out1_prev[14] !== G_out1_expected_prev[14] )
		&& ((G_out1_expected_prev[14] !== last_G_out1_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[14] = G_out1_expected_prev[14];
	end
	if (
		( G_out1_expected_prev[15] !== 1'bx ) && ( G_out1_prev[15] !== G_out1_expected_prev[15] )
		&& ((G_out1_expected_prev[15] !== last_G_out1_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[15] = G_out1_expected_prev[15];
	end
	if (
		( G_out1_expected_prev[16] !== 1'bx ) && ( G_out1_prev[16] !== G_out1_expected_prev[16] )
		&& ((G_out1_expected_prev[16] !== last_G_out1_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[16] = G_out1_expected_prev[16];
	end
	if (
		( G_out1_expected_prev[17] !== 1'bx ) && ( G_out1_prev[17] !== G_out1_expected_prev[17] )
		&& ((G_out1_expected_prev[17] !== last_G_out1_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[17] = G_out1_expected_prev[17];
	end
	if (
		( G_out1_expected_prev[18] !== 1'bx ) && ( G_out1_prev[18] !== G_out1_expected_prev[18] )
		&& ((G_out1_expected_prev[18] !== last_G_out1_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[18] = G_out1_expected_prev[18];
	end
	if (
		( G_out1_expected_prev[19] !== 1'bx ) && ( G_out1_prev[19] !== G_out1_expected_prev[19] )
		&& ((G_out1_expected_prev[19] !== last_G_out1_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[19] = G_out1_expected_prev[19];
	end
	if (
		( G_out1_expected_prev[20] !== 1'bx ) && ( G_out1_prev[20] !== G_out1_expected_prev[20] )
		&& ((G_out1_expected_prev[20] !== last_G_out1_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[20] = G_out1_expected_prev[20];
	end
	if (
		( G_out1_expected_prev[21] !== 1'bx ) && ( G_out1_prev[21] !== G_out1_expected_prev[21] )
		&& ((G_out1_expected_prev[21] !== last_G_out1_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[21] = G_out1_expected_prev[21];
	end
	if (
		( G_out1_expected_prev[22] !== 1'bx ) && ( G_out1_prev[22] !== G_out1_expected_prev[22] )
		&& ((G_out1_expected_prev[22] !== last_G_out1_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[22] = G_out1_expected_prev[22];
	end
	if (
		( G_out1_expected_prev[23] !== 1'bx ) && ( G_out1_prev[23] !== G_out1_expected_prev[23] )
		&& ((G_out1_expected_prev[23] !== last_G_out1_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[23] = G_out1_expected_prev[23];
	end
	if (
		( G_out1_expected_prev[24] !== 1'bx ) && ( G_out1_prev[24] !== G_out1_expected_prev[24] )
		&& ((G_out1_expected_prev[24] !== last_G_out1_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[24] = G_out1_expected_prev[24];
	end
	if (
		( G_out1_expected_prev[25] !== 1'bx ) && ( G_out1_prev[25] !== G_out1_expected_prev[25] )
		&& ((G_out1_expected_prev[25] !== last_G_out1_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[25] = G_out1_expected_prev[25];
	end
	if (
		( G_out1_expected_prev[26] !== 1'bx ) && ( G_out1_prev[26] !== G_out1_expected_prev[26] )
		&& ((G_out1_expected_prev[26] !== last_G_out1_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[26] = G_out1_expected_prev[26];
	end
	if (
		( G_out1_expected_prev[27] !== 1'bx ) && ( G_out1_prev[27] !== G_out1_expected_prev[27] )
		&& ((G_out1_expected_prev[27] !== last_G_out1_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[27] = G_out1_expected_prev[27];
	end
	if (
		( G_out1_expected_prev[28] !== 1'bx ) && ( G_out1_prev[28] !== G_out1_expected_prev[28] )
		&& ((G_out1_expected_prev[28] !== last_G_out1_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[28] = G_out1_expected_prev[28];
	end
	if (
		( G_out1_expected_prev[29] !== 1'bx ) && ( G_out1_prev[29] !== G_out1_expected_prev[29] )
		&& ((G_out1_expected_prev[29] !== last_G_out1_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[29] = G_out1_expected_prev[29];
	end
	if (
		( G_out1_expected_prev[30] !== 1'bx ) && ( G_out1_prev[30] !== G_out1_expected_prev[30] )
		&& ((G_out1_expected_prev[30] !== last_G_out1_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[30] = G_out1_expected_prev[30];
	end
	if (
		( G_out1_expected_prev[31] !== 1'bx ) && ( G_out1_prev[31] !== G_out1_expected_prev[31] )
		&& ((G_out1_expected_prev[31] !== last_G_out1_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out1_expected_prev);
		$display ("     Real value = %b", G_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_G_out1_exp[31] = G_out1_expected_prev[31];
	end
	if (
		( G_out2_expected_prev[0] !== 1'bx ) && ( G_out2_prev[0] !== G_out2_expected_prev[0] )
		&& ((G_out2_expected_prev[0] !== last_G_out2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[0] = G_out2_expected_prev[0];
	end
	if (
		( G_out2_expected_prev[1] !== 1'bx ) && ( G_out2_prev[1] !== G_out2_expected_prev[1] )
		&& ((G_out2_expected_prev[1] !== last_G_out2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[1] = G_out2_expected_prev[1];
	end
	if (
		( G_out2_expected_prev[2] !== 1'bx ) && ( G_out2_prev[2] !== G_out2_expected_prev[2] )
		&& ((G_out2_expected_prev[2] !== last_G_out2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[2] = G_out2_expected_prev[2];
	end
	if (
		( G_out2_expected_prev[3] !== 1'bx ) && ( G_out2_prev[3] !== G_out2_expected_prev[3] )
		&& ((G_out2_expected_prev[3] !== last_G_out2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[3] = G_out2_expected_prev[3];
	end
	if (
		( G_out2_expected_prev[4] !== 1'bx ) && ( G_out2_prev[4] !== G_out2_expected_prev[4] )
		&& ((G_out2_expected_prev[4] !== last_G_out2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[4] = G_out2_expected_prev[4];
	end
	if (
		( G_out2_expected_prev[5] !== 1'bx ) && ( G_out2_prev[5] !== G_out2_expected_prev[5] )
		&& ((G_out2_expected_prev[5] !== last_G_out2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[5] = G_out2_expected_prev[5];
	end
	if (
		( G_out2_expected_prev[6] !== 1'bx ) && ( G_out2_prev[6] !== G_out2_expected_prev[6] )
		&& ((G_out2_expected_prev[6] !== last_G_out2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[6] = G_out2_expected_prev[6];
	end
	if (
		( G_out2_expected_prev[7] !== 1'bx ) && ( G_out2_prev[7] !== G_out2_expected_prev[7] )
		&& ((G_out2_expected_prev[7] !== last_G_out2_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[7] = G_out2_expected_prev[7];
	end
	if (
		( G_out2_expected_prev[8] !== 1'bx ) && ( G_out2_prev[8] !== G_out2_expected_prev[8] )
		&& ((G_out2_expected_prev[8] !== last_G_out2_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[8] = G_out2_expected_prev[8];
	end
	if (
		( G_out2_expected_prev[9] !== 1'bx ) && ( G_out2_prev[9] !== G_out2_expected_prev[9] )
		&& ((G_out2_expected_prev[9] !== last_G_out2_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[9] = G_out2_expected_prev[9];
	end
	if (
		( G_out2_expected_prev[10] !== 1'bx ) && ( G_out2_prev[10] !== G_out2_expected_prev[10] )
		&& ((G_out2_expected_prev[10] !== last_G_out2_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[10] = G_out2_expected_prev[10];
	end
	if (
		( G_out2_expected_prev[11] !== 1'bx ) && ( G_out2_prev[11] !== G_out2_expected_prev[11] )
		&& ((G_out2_expected_prev[11] !== last_G_out2_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[11] = G_out2_expected_prev[11];
	end
	if (
		( G_out2_expected_prev[12] !== 1'bx ) && ( G_out2_prev[12] !== G_out2_expected_prev[12] )
		&& ((G_out2_expected_prev[12] !== last_G_out2_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[12] = G_out2_expected_prev[12];
	end
	if (
		( G_out2_expected_prev[13] !== 1'bx ) && ( G_out2_prev[13] !== G_out2_expected_prev[13] )
		&& ((G_out2_expected_prev[13] !== last_G_out2_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[13] = G_out2_expected_prev[13];
	end
	if (
		( G_out2_expected_prev[14] !== 1'bx ) && ( G_out2_prev[14] !== G_out2_expected_prev[14] )
		&& ((G_out2_expected_prev[14] !== last_G_out2_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[14] = G_out2_expected_prev[14];
	end
	if (
		( G_out2_expected_prev[15] !== 1'bx ) && ( G_out2_prev[15] !== G_out2_expected_prev[15] )
		&& ((G_out2_expected_prev[15] !== last_G_out2_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[15] = G_out2_expected_prev[15];
	end
	if (
		( G_out2_expected_prev[16] !== 1'bx ) && ( G_out2_prev[16] !== G_out2_expected_prev[16] )
		&& ((G_out2_expected_prev[16] !== last_G_out2_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[16] = G_out2_expected_prev[16];
	end
	if (
		( G_out2_expected_prev[17] !== 1'bx ) && ( G_out2_prev[17] !== G_out2_expected_prev[17] )
		&& ((G_out2_expected_prev[17] !== last_G_out2_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[17] = G_out2_expected_prev[17];
	end
	if (
		( G_out2_expected_prev[18] !== 1'bx ) && ( G_out2_prev[18] !== G_out2_expected_prev[18] )
		&& ((G_out2_expected_prev[18] !== last_G_out2_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[18] = G_out2_expected_prev[18];
	end
	if (
		( G_out2_expected_prev[19] !== 1'bx ) && ( G_out2_prev[19] !== G_out2_expected_prev[19] )
		&& ((G_out2_expected_prev[19] !== last_G_out2_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[19] = G_out2_expected_prev[19];
	end
	if (
		( G_out2_expected_prev[20] !== 1'bx ) && ( G_out2_prev[20] !== G_out2_expected_prev[20] )
		&& ((G_out2_expected_prev[20] !== last_G_out2_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[20] = G_out2_expected_prev[20];
	end
	if (
		( G_out2_expected_prev[21] !== 1'bx ) && ( G_out2_prev[21] !== G_out2_expected_prev[21] )
		&& ((G_out2_expected_prev[21] !== last_G_out2_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[21] = G_out2_expected_prev[21];
	end
	if (
		( G_out2_expected_prev[22] !== 1'bx ) && ( G_out2_prev[22] !== G_out2_expected_prev[22] )
		&& ((G_out2_expected_prev[22] !== last_G_out2_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[22] = G_out2_expected_prev[22];
	end
	if (
		( G_out2_expected_prev[23] !== 1'bx ) && ( G_out2_prev[23] !== G_out2_expected_prev[23] )
		&& ((G_out2_expected_prev[23] !== last_G_out2_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[23] = G_out2_expected_prev[23];
	end
	if (
		( G_out2_expected_prev[24] !== 1'bx ) && ( G_out2_prev[24] !== G_out2_expected_prev[24] )
		&& ((G_out2_expected_prev[24] !== last_G_out2_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[24] = G_out2_expected_prev[24];
	end
	if (
		( G_out2_expected_prev[25] !== 1'bx ) && ( G_out2_prev[25] !== G_out2_expected_prev[25] )
		&& ((G_out2_expected_prev[25] !== last_G_out2_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[25] = G_out2_expected_prev[25];
	end
	if (
		( G_out2_expected_prev[26] !== 1'bx ) && ( G_out2_prev[26] !== G_out2_expected_prev[26] )
		&& ((G_out2_expected_prev[26] !== last_G_out2_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[26] = G_out2_expected_prev[26];
	end
	if (
		( G_out2_expected_prev[27] !== 1'bx ) && ( G_out2_prev[27] !== G_out2_expected_prev[27] )
		&& ((G_out2_expected_prev[27] !== last_G_out2_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[27] = G_out2_expected_prev[27];
	end
	if (
		( G_out2_expected_prev[28] !== 1'bx ) && ( G_out2_prev[28] !== G_out2_expected_prev[28] )
		&& ((G_out2_expected_prev[28] !== last_G_out2_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[28] = G_out2_expected_prev[28];
	end
	if (
		( G_out2_expected_prev[29] !== 1'bx ) && ( G_out2_prev[29] !== G_out2_expected_prev[29] )
		&& ((G_out2_expected_prev[29] !== last_G_out2_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[29] = G_out2_expected_prev[29];
	end
	if (
		( G_out2_expected_prev[30] !== 1'bx ) && ( G_out2_prev[30] !== G_out2_expected_prev[30] )
		&& ((G_out2_expected_prev[30] !== last_G_out2_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[30] = G_out2_expected_prev[30];
	end
	if (
		( G_out2_expected_prev[31] !== 1'bx ) && ( G_out2_prev[31] !== G_out2_expected_prev[31] )
		&& ((G_out2_expected_prev[31] !== last_G_out2_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_out2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_out2_expected_prev);
		$display ("     Real value = %b", G_out2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_G_out2_exp[31] = G_out2_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg [31:0] d;
reg [2:0] Read_sel_1_;
reg [2:0] Read_sel_2_;
reg [2:0] val;
reg write_enable;
// wires                                               
wire [31:0] G_out1;
wire [31:0] G_out2;

wire sampler;                             

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.d(d),
	.G_out1(G_out1),
	.G_out2(G_out2),
	.Read_sel_1_(Read_sel_1_),
	.Read_sel_2_(Read_sel_2_),
	.val(val),
	.write_enable(write_enable)
);

// clk
initial
begin
	clk = 1'b1;
end 

// clr
initial
begin
	clr = 1'b0;
end 
// d[ 31 ]
initial
begin
	d[31] = 1'b0;
end 
// d[ 30 ]
initial
begin
	d[30] = 1'b0;
end 
// d[ 29 ]
initial
begin
	d[29] = 1'b0;
end 
// d[ 28 ]
initial
begin
	d[28] = 1'b0;
end 
// d[ 27 ]
initial
begin
	d[27] = 1'b0;
end 
// d[ 26 ]
initial
begin
	d[26] = 1'b0;
end 
// d[ 25 ]
initial
begin
	d[25] = 1'b0;
end 
// d[ 24 ]
initial
begin
	d[24] = 1'b0;
end 
// d[ 23 ]
initial
begin
	d[23] = 1'b0;
end 
// d[ 22 ]
initial
begin
	d[22] = 1'b0;
end 
// d[ 21 ]
initial
begin
	d[21] = 1'b0;
end 
// d[ 20 ]
initial
begin
	d[20] = 1'b0;
end 
// d[ 19 ]
initial
begin
	d[19] = 1'b0;
end 
// d[ 18 ]
initial
begin
	d[18] = 1'b0;
end 
// d[ 17 ]
initial
begin
	d[17] = 1'b0;
end 
// d[ 16 ]
initial
begin
	d[16] = 1'b0;
end 
// d[ 15 ]
initial
begin
	d[15] = 1'b0;
end 
// d[ 14 ]
initial
begin
	d[14] = 1'b0;
end 
// d[ 13 ]
initial
begin
	d[13] = 1'b0;
end 
// d[ 12 ]
initial
begin
	d[12] = 1'b0;
end 
// d[ 11 ]
initial
begin
	d[11] = 1'b0;
end 
// d[ 10 ]
initial
begin
	d[10] = 1'b0;
end 
// d[ 9 ]
initial
begin
	d[9] = 1'b0;
end 
// d[ 8 ]
initial
begin
	d[8] = 1'b0;
end 
// d[ 7 ]
initial
begin
	d[7] = 1'b0;
end 
// d[ 6 ]
initial
begin
	d[6] = 1'b0;
end 
// d[ 5 ]
initial
begin
	d[5] = 1'b0;
end 
// d[ 4 ]
initial
begin
	d[4] = 1'b0;
end 
// d[ 3 ]
initial
begin
	d[3] = 1'b1;
end 
// d[ 2 ]
initial
begin
	d[2] = 1'b1;
end 
// d[ 1 ]
initial
begin
	d[1] = 1'b0;
end 
// d[ 0 ]
initial
begin
	d[0] = 1'b0;
end 
// Read_sel_1_[ 2 ]
initial
begin
	Read_sel_1_[2] = 1'b0;
	Read_sel_1_[2] = #320000 1'b1;
	Read_sel_1_[2] = #320000 1'b0;
	Read_sel_1_[2] = #320000 1'b1;
end 
// Read_sel_1_[ 1 ]
initial
begin
	repeat(3)
	begin
		Read_sel_1_[1] = 1'b0;
		Read_sel_1_[1] = #160000 1'b1;
		# 160000;
	end
	Read_sel_1_[1] = 1'b0;
end 
// Read_sel_1_[ 0 ]
initial
begin
	repeat(6)
	begin
		Read_sel_1_[0] = 1'b0;
		Read_sel_1_[0] = #80000 1'b1;
		# 80000;
	end
	Read_sel_1_[0] = 1'b0;
end 
// Read_sel_2_[ 2 ]
initial
begin
	Read_sel_2_[2] = 1'b0;
	Read_sel_2_[2] = #480000 1'b1;
	Read_sel_2_[2] = #480000 1'b0;
end 
// Read_sel_2_[ 1 ]
initial
begin
	repeat(2)
	begin
		Read_sel_2_[1] = 1'b0;
		Read_sel_2_[1] = #240000 1'b1;
		# 240000;
	end
	Read_sel_2_[1] = 1'b0;
end 
// Read_sel_2_[ 0 ]
initial
begin
	repeat(4)
	begin
		Read_sel_2_[0] = 1'b0;
		Read_sel_2_[0] = #120000 1'b1;
		# 120000;
	end
	Read_sel_2_[0] = 1'b0;
end 
// val[ 2 ]
initial
begin
	val[2] = 1'b1;
end 
// val[ 1 ]
initial
begin
	val[1] = 1'b0;
end 
// val[ 0 ]
initial
begin
	val[0] = 1'b0;
end 

// write_enable
initial
begin
	write_enable = 1'b1;
end 

final_vlg_sample_tst tb_sample (
	.clk(clk),
	.clr(clr),
	.d(d),
	.Read_sel_1_(Read_sel_1_),
	.Read_sel_2_(Read_sel_2_),
	.val(val),
	.write_enable(write_enable),
	.sampler_tx(sampler)
);

final_vlg_check_tst tb_out(
	.G_out1(G_out1),
	.G_out2(G_out2),
	.sampler_rx(sampler)
);
endmodule

